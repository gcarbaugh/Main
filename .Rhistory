w_digs  = w_p1_tot_digs + w_p2_tot_digs,
# Agg Loser Mutate
l_attacks = l_p1_tot_attacks + l_p2_tot_attacks,
l_kills = l_p1_tot_kills + l_p2_tot_kills,
l_errors = l_p1_tot_errors + l_p2_tot_errors,
l_aces  = l_p1_tot_aces + l_p2_tot_aces,
l_serve_errors  = l_p1_tot_serve_errors + l_p2_tot_serve_errors,
l_blocks  = l_p1_tot_blocks + l_p2_tot_blocks,
l_digs  = l_p1_tot_digs + l_p2_tot_digs,
) %>%
na.omit()
vb_parse
library(stringr)
vb_parse %>%
dplyr::selct(circuit, gender, year, w_attacks:w_digs) %>%
rename_with(~ stringr::str_remove_all(.,"w_"), .cols = w_attacks:w_digs)
vb_parse %>%
dplyr::select(circuit, gender, year, w_attacks:w_digs) %>%
rename_with(~ stringr::str_remove_all(.,"w_"), .cols = w_attacks:w_digs)
vb_parse %>%
dplyr::select(circuit, gender, year, w_attacks:w_digs) %>%
rename_with(~ stringr::str_remove_all(.,"w_"), .cols = w_attacks:w_digs) %>%
mutate(win = 'win')
winners <- vb_parse %>%
dplyr::select(circuit, gender, year, w_attacks:w_digs) %>%
rename_with(~ stringr::str_remove_all(.,"w_"), .cols = w_attacks:w_digs) %>%
mutate(win = 'win')
vb_df <- dplyr::bind_rows(winners,losers)
vb_df <- dplyr::bind_rows(winners,losers) %>%
mutate_if(is.character, factor)
losers <- vb_parse %>%
dplyr::select(circuit, gender, year, l_attacks:l_digs) %>%
rename_lith(~ stringr::str_remove_all(.,"l_"), .cols = l_attacks:l_digs) %>%
mutate(win = 'lose')
losers <- vb_parse %>%
dplyr::select(circuit, gender, year, l_attacks:l_digs) %>%
rename_with(~ stringr::str_remove_all(.,"l_"), .cols = l_attacks:l_digs) %>%
mutate(win = 'lose')
losers
vb_df <- dplyr::bind_rows(winners,losers) %>%
mutate_if(is.character, factor)
vb_df
library(tidyr)
vb_df %>% tidyr::pivot_longer(attacks:digs, names_to = 'stat', values_to = "value")
library(ggplot2)
vb_df %>%
tidyr::pivot_longer(attacks:digs, names_to = 'stat', values_to = "value") %>%
ggplot2(aes(gender, value, fill = win)) +
geom_boxplot() +
facet_wrap(~stat, scales='free_y')
vb_df %>%
tidyr::pivot_longer(attacks:digs, names_to = 'stat', values_to = "value") %>%
ggplot2::ggplot(aes(gender, value, fill = win)) +
geom_boxplot() +
facet_wrap(~stat, scales='free_y',nrow = 2)
vb_df %>%
tidyr::pivot_longer(attacks:digs, names_to = 'stat', values_to = "value") %>%
ggplot2::ggplot(aes(gender, value, fill = win)) +
geom_boxplot(alpha=0.4) +
facet_wrap(~stat, scales='free_y',nrow = 2)+
labs(x=NULL,y=NULL,fill=NULL)
install.packages('tidymodels')
library(tidymodels)
# Build a Model
set.seed(123)
vb_split <- initial_split(vb_df, strata = win)
vb_split
vb_train <- rsample::training(vb_split)
vb_test <- rsample::testing(vb_split)
?parsnip::boost_tree(
)
xgb_spec <- parsnip::boost_tree(
mtry = tune::tune(),
#> the number (or proportion) of predictors that will be randomly sampled at each split when creating the tree models
trees = 1000,
min_n = tune::tune(),
#> minimum number of data points in a node that is required for the node to be split further.
tree_depth = tune::tune(),
#> max depth of the tree (number of splits)
loss_reduction = tune::tune(),
#> reduction in the loss function required for the tree to be split further
#> effectively is a residual sum of squares optimization
learn_rate = tune::tune(),
sample_size = tune::tune()
) %>%
set_engine('xgboost') %>%
set_mode('classification')
xgb_spec
?dials::grid_latin_hypercube()
xgb_grid <- dials::grid_latin_hypercube(
dials::tree_depth(),
dials::min_n(),
dials::loss_reduction(),
sample_size = dials::sample_prop(),
mtry(),
dials::learn_rate()
size = 20
xgb_grid <- dials::grid_latin_hypercube(
dials::tree_depth(),
dials::min_n(),
dials::loss_reduction(),
sample_size = dials::sample_prop(),
mtry(),
dials::learn_rate(),
size = 20
)
mtry()
finalize(mtry(), vb_train)
xgb_grid <- dials::grid_latin_hypercube(
dials::tree_depth(),
dials::min_n(),
dials::loss_reduction(),
sample_size = dials::sample_prop(),
finalize(mtry(), vb_train),
dials::learn_rate(),
size = 20
)
xgb_grid
xgb_wf <- workflows::workflow() %>%
workflows::add_formula(win ~ .) %>%
workflows::add_model(xgb_spec)
xgb_wf
rsample::vfold_cv(vb_train, strata = win)
library(doParallel)
install.packages('doParallel')
library(doParallel)
vb_folds
vb_folds <- rsample::vfold_cv(vb_train, strata = win)
vb_folds
xgb_res <- tune::tune_grid(
# The Workflow is the object.
object = xgb_wf,
# The CV's
resamples = vb_folds,
grid =xgb_grid,
control = tune::control_grid(save_pred = T)
)
library(tune)
library(xgboost)
install.packages('xgboost')
library(xgboost)
xgb_res <- tune::tune_grid(
# The Workflow is the object.
object = xgb_wf,
# The CV's
resamples = vb_folds,
grid =xgb_grid,
control = tune::control_grid(save_pred = T)
)
doParallel::registerDoParallel()
set(234)
doParallel::registerDoParallel()
seed(234)
doParallel::registerDoParallel()
set.seed(234)
xgb_res <- tune::tune_grid(
# The Workflow is the object.
object = xgb_wf,
# The CV's
resamples = vb_folds,
grid =xgb_grid,
control = tune::control_grid(save_pred = T)
)
install.packages('vip')
library(vip)
xbg_res
xgb_res
xgb_res %>%
workflowsets::collect_metrics() %>%
filter(.metric = 'roc_auc') %>%
select(mean, mtry:sample_size) %>%
tidyr::pivot_longer(mtry:sample_size,
names_to = "parameter",
values_to = "value"
) %>%
ggplot2::ggplot(gpglot2::aes(value,mean,color=parameter)) +
ggplot2::geom_point(show.legend = F) +
ggplot2::facet_wrap(~parameter, scales = "free_x") +
ggplot2::labs(y = 'Area Under the Curve',title = 'See how the Data is Dispersed')
xgb_res %>%
workflowsets::collect_metrics() %>%
filter(.metric == 'roc_auc') %>%
select(mean, mtry:sample_size) %>%
tidyr::pivot_longer(mtry:sample_size,
names_to = "parameter",
values_to = "value"
) %>%
ggplot2::ggplot(gpglot2::aes(value,mean,color=parameter)) +
ggplot2::geom_point(show.legend = F) +
ggplot2::facet_wrap(~parameter, scales = "free_x") +
ggplot2::labs(y = 'Area Under the Curve',title = 'See how the Data is Dispersed')
xgb_res %>%
workflowsets::collect_metrics() %>%
filter(.metric == 'roc_auc') %>%
select(mean, mtry:sample_size) %>%
tidyr::pivot_longer(mtry:sample_size,
names_to = "parameter",
values_to = "value"
) %>%
ggplot2::ggplot(ggplot2::aes(value,mean,color=parameter)) +
ggplot2::geom_point(show.legend = F) +
ggplot2::facet_wrap(~parameter, scales = "free_x") +
ggplot2::labs(y = 'Area Under the Curve',title = 'See how the Data is Dispersed')
# Returns the best performing model estimates by AUC
tune::show_best(xbg_res, "roc_auc") %>% View()
# Returns the best performing model estimates by AUC
tune::show_best(xgb_res, "roc_auc") %>% View()
tune::show_best(xgb_res, "roc_auc")
xgb_res
# Returns the best performing model estimates by AUC
tune::show_best(xgb_res, metric = "roc_auc") %>% View()
# Pulls out the best performing estimate
best_auc <- tune::select_best(xgb_res, "roc_auc"); best_auc
# Pulls out the best performing estimate
best_auc <- tune::select_best(xgb_res, metric = "roc_auc"); best_auc
# Replaces the WF tuners with the parameters from the estimate with the best AUC above
final_xgb <- tune::finalize_workflow(wgb_wf, best_auc)
# Replaces the WF tuners with the parameters from the estimate with the best AUC above
final_xgb <- tune::finalize_workflow(xgb_wf, best_auc)
final_xgb
final_xgb %>%
parsnip::fit(data = vb_train) %>%
workflows::pull_workflow_fit() %>%
vip::vip(geom="point")
final_result <- tune::last_fit(final_xgb, vb_split)
final_result %>% collect_metrics()
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::conf_mat(win, .pred_class)
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::roc_curve(win, .pred_win) %>%
autoplot()
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::roc_curve(win, .pred_win)
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::conf_mat(win, .pred_class)
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::roc_curve(win, .pred_win) %>%
autoplot()
gc()
readr::write_rds(xgb_res, 'vb_xgb.rds')
# Project Directory
setwd('C:/Users/carba/Documents/R/Main/tidymodels/xgboost/')
readr::write_rds(xgb_res, 'vb_xgb.rds')
# Project Directory
setwd('C:/Users/carba/Documents/R/Main/tidymodels/xgboost/')
# Load Data ----------
vb_matches <- readr::read_csv("vb_matches.csv", guess_max = 76000)
if(!exists('xgb_res')){xgb_res <- readr::read_rds('vb_xgb.rds')}
xgb_res
xgb_res %>%
workflowsets::collect_metrics() %>%
filter(.metric == 'roc_auc') %>%
select(mean, mtry:sample_size) %>%
tidyr::pivot_longer(mtry:sample_size,
names_to = "parameter",
values_to = "value"
) %>%
ggplot2::ggplot(ggplot2::aes(value,mean,color=parameter)) +
ggplot2::geom_point(show.legend = F) +
ggplot2::facet_wrap(~parameter, scales = "free_x") +
ggplot2::labs(y = 'Area Under the Curve',title = 'See how the Data is Dispersed')
reticulate::repl_python()
from kenpompy.utils import login
your_email = "travpollack@gmail.com"
your_password = "TheJets88$"
browser = login(your_email, your_password)
import kenpompy.summary as kp
eff_statas = kp.get_efficiency(browser)
eff_stats = kp.get_efficiency(browser)
eff_stats
kp.get_teamstats(browser)
quit
# Project Directory
setwd('C:/Users/carba/Documents/R/Main/tidymodels/xgboost/')
vb_matches
vb_matches %>% View()
# Libraries ----------
library(dplyr)
vb_matches %>% View()
if(!exists('xgb_res')){xgb_res <- readr::read_rds('vb_xgb.rds')}
xgb_res %>%
workflowsets::collect_metrics() %>%
filter(.metric == 'roc_auc') %>%
select(mean, mtry:sample_size) %>%
tidyr::pivot_longer(mtry:sample_size,
names_to = "parameter",
values_to = "value"
) %>%
ggplot2::ggplot(ggplot2::aes(value,mean,color=parameter)) +
ggplot2::geom_point(show.legend = F) +
ggplot2::facet_wrap(~parameter, scales = "free_x") +
ggplot2::labs(y = 'Area Under the Curve',title = 'See how the Data is Dispersed')
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::conf_mat(win, .pred_class)
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::roc_curve(win, .pred_win) %>%
autoplot()
library(tidymodels)
final_result %>%
workflowsets::collect_predictions() %>%
yardstick::roc_curve(win, .pred_win) %>%
autoplot()
final_result %>% workflowsets::collect_metrics()
final_xgb %>%
parsnip::fit(data = vb_train) %>%
workflows::pull_workflow_fit() %>%
vip::vip(geom="point")
final_xgb
final_result
final_result %>% workflowsets::collect_metrics()
final_result %>% workflowsets::collect_notes()
final_result %>% workflowsets::collect_predictions()
x1 <- final_result %>% workflowsets::collect_predictions()
x1
# Libraries ----------
library(dplyr)
x1 %>% filter(.pred_class != win)
x1 %>% filter(.pred_class != win) %>%
group_by(.config) %>%
summarize(Count = n())
x1 %>% #filter(.pred_class != win) %>%
group_by(.config) %>%
summarize(Count = n())
x1 %>% filter(.pred_class != win) %>%
group_by(.config) %>%
summarize(Count = n())
install.packages('rugarch')
install.packages('GAMLSS')
install.packages('gamlss')
parsnip::gen_additive_mod()
parsnip::gen_additive_mod() %>%
parsnip::set_engine('mgcv')
gam_model <- parsnip::gen_additive_mod() %>%
parsnip::set_engine('mgcv') %>%
parsnip::set_mode("regression")
gam_model
mtcars
diamonds
diamonds$cut %>% class()
recipes::recipe(caret ~ ., data = diamonds) %>%
recipes::step_ordinalscore(all_factor_predictors()
)
rec <- recipes::recipe(caret ~ , data = diamonds) %>%
rec <- recipes::recipe(caret ~ cut+color+clarity+depth+table+price+x+y+z, data = diamonds) %>%
recipes::step_ordinalscore(all_factor_predictors())
rec <- recipes::recipe(carat ~., data = diamonds) %>%
recipes::step_ordinalscore(all_factor_predictors())
rec
gam_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(gam_model) %>%
fit(data = diamonds)
gam_model
gam_model <- parsnip::gen_additive_mod() %>%
parsnip::set_engine('mgcv') %>%
parsnip::set_mode("regression")
gam_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(gam_model) %>%
fit(data = diamonds)
rec
gam_model
?recipes::recipe()
rec <- recipes::recipe(formula = carat ~., data = diamonds) %>%
recipes::step_ordinalscore(all_factor_predictors())
rec
gam_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(gam_model) %>%
fit(data = diamonds)
gam_model
recipes::recipe(formula = carat ~., data = diamonds)
recipes::recipe(formula = carat ~., data = diamonds) %>%
recipes::step_ordinalscore(all_factor_predictors())
reticulate::repl_python()
kp.get_playerstats()
browser = login(your_email, your_password)
kp.get_playerstats(browser)
kp.get_playerstats(browser,2023)
kp.get_playerstats(browser,2024)
kp.get_playerstats(browser,1999)
kp.get_playerstats(browser,2000)
kp.get_playerstats(browser,2004)
kp.get_playerstats(browser,2005)
kp.get_playerstats(browser,2006)
kp.get_playerstats(browser,2020)
kp.get_efficiency(browser,2020:2024)
kp.get_efficiency(browser,2024)
df = kp.get_efficiency(browser,2024)
df
df[]
quit
df
df
reticulate::repl_python()
df = kp.get_efficiency(browser,2024)
df1 = kp.get_efficiency(browser,2024)
quit
df1
reticulate::repl_python()
df1
quit
# Add new record to the keychain
kc_new <- data.frame(
site = "kenpom",
your_email = "travpollack@gmail.com",
your_password = "TheJets88$"
)
kc_new
kc <- data.frame()
kc <- rbind(kc,kc_new)
library(readr)
write_csv(kc, "C:/Users/carba/Documents/Projects/keychain/keychain.csv")
reticulate::repl_python()
import pandas as pd
df = pd.read_csv('C:/Users/carba/Documents/Projects/keychain/keychain.csv',sep=',',header=0)
df
df[df['site'] == 'kenpom']
your_email = df['your_email']
your_password = df['your_password']
your_password
your_email
your_email = df['your_email'].to_numpy()
your_email
your_email = df['your_email'].to_list()
your_email
your_password = df['your_password'].to_list()
browser = login(your_email, your_password)
browser
eff_stats = kp.get_efficiency(browser)
eff_stats
browser = login(df['your_email'].to_list(), df['your_password'].to_list())
eff_stats = kp.get_efficiency(browser)
eff_stats
kp.get_teamstats()
kp.get_teamstats(browser)
import os
os.system()
start_year <- 2024
seasons = [start_year, start_year-1, start_year-2, start_year-3, start_year-4]
start_year <- 2024
seasons = [start_year, start_year-1, start_year-2, start_year-3, start_year-4]
start_year = 2024
seasons = [start_year, start_year-1, start_year-2, start_year-3, start_year-4]
seasons
all_team_stats = pd.DataFrame()
for year in seasons:
# Fetch team stats for the current season
team_stats = kp.get_team_stats(sess, year)
# Add the season column for reference
team_stats['season'] = year
# Append the current season's stats to the combined DataFrame
all_team_stats = pd.concat([all_team_stats, team_stats], ignore_index=True)
for year in seasons:
# Fetch team stats for the current season
team_stats = kp.get_teamstats(sess, year)
# Add the season column for reference
team_stats['season'] = year
# Append the current season's stats to the combined DataFrame
all_team_stats = pd.concat([all_team_stats, team_stats], ignore_index=True)
# Loop through each season and fetch team stats
for year in seasons:
# Fetch team stats for the current season
team_stats = kp.get_teamstats(browser, year)
# Add the season column for reference
team_stats['season'] = year
# Append the current season's stats to the combined DataFrame
all_team_stats = pd.concat([all_team_stats, team_stats], ignore_index=True)
all_team_stats
kp.mechanicalsoup
kp.get_playerstats(browser)
kp.get_playerstats()
all_player_stats = pd.DataFrame()
for year in seasons:
# Fetch team stats for the current season
team_stats = kp.get_playerstats(browser, year)
# Add the season column for reference
team_stats['season'] = year
# Append the current season's stats to the combined DataFrame
all_player_stats = pd.concat([all_player_stats, team_stats], ignore_index=True)
all_player_stats
all_player_stats.sort_values(by='team')
all_player_stats
x2 = all_player_stats.sort_values(by='team')
x2 = all_player_stats.sort_values(by='Team')
all_player_stats.sort_values(by='Team')
# Initialize an empty DataFrame
all_team_stats = pd.DataFrame()
for year in seasons:
# Fetch team stats for the current season
team_stats = kp.get_teamstats(browser, year)
# Add the season column for reference
team_stats['season'] = year
# Append the current season's stats to the combined DataFrame
all_team_stats = pd.concat([all_team_stats, team_stats], ignore_index=True)
all_team_stats
View(all_team_stats)
quit
gc()
globals().clear()
reticulate::repl_python()
globals().clear()
quit
i
quit()
